<?xml version="1.0"?>
<main>
  <title>developer's guide</title>
  <article>  
	<![CDATA[

	  <h2>Matrix&lt;T&gt;</h2>
	  <p class="lead">
		codeare's main design goal was to provide an easy framework
		for implementing MRI algorithms. The fundamental supplement is
		a flexible and lightweight matrix class that is optimally
		unlimited in dimentsions. Further, C++ was chosen as the core
		language as it provides near-assembly speed with the ease of
		use and	full blown functionality of an OO-Language. 
	  </p>
	  <p>
		A conscious decision was made that the matrix only includes
		essential methods, i.e. minimum necessary set of constructors
		and access functionality to element, columns, rows, slices ... 
	  </p>
	  <p>
		That is to say that any function on the matrix, should be a
		real C-type function and any constructor of specialised
		matrices should be a templated C-type constructor; i.e. 
		<code>A = pinv(B);</code> rather than <code>A =
		B.pinv();</code> and <code> A = zeros&lt;double&gt;
		(300,100);</code> rather than <code>A = Matrix&lt;double&gt;::zeros
		(300,100)</code>. This is much closer to the way we write code
		in MATLAB, python etc.
	  </p>
	  <p>
		The matrix, thus, comes with default constructors, arithmetic
		operators to provide for example <code>A *= B;</code>, Access
		operators to provide for example <code>A(3,4) = 15.0</code>,
		some index arithmetic and size and dimension
		functionality. The complete documentation of the matrix member
		functionality is found in the API description.
	  </p>
	  <p>
		One drawback of C++ when compared to python and fortran
		etc. is the poor support of array slicing and range operators
		associated with the :-operator. This does not prevent the user
		to use python for data processing, though.
	  </p>
	  <p>
		The bulk of operation on matrices are provided as static
		functions. The vast majority allows one to assign the result
		to a new matrix i.e.:
		<ul>
		  <li><code>A = pinv(B);</code></li>
		  <li><code>A = fft (B);</code></li>
		  <li><code>A = dwt (B);</code></li>
		  <li><code>A = sin (B);</code></li>
		</ul>
	  </p>
	  <p>
		etc. However as the return type of C++ functions can only be a
		generic type, a reference, a pointer or an object, the nice
		and flexible MATLAB like coding is not feasible for methods
		that return multiple matrices i.e. instead of <code>[U,S,V] =
		svd (A)</code>, matrix references need to be passed to such
		functions: <code>svd (A, U, S, V)</code>. Obviously one could
		provide structs for such return complexes, however it has been
		refrained from here to keep things simple and code maintenance
		load low.
	  </p>

	  <a name="matrix"></a>
	  <h2>Database</h2>
	  <p class="lead">
		A database instance is provided to allow one to keep matrices
		available across the running processes children known by their
		names. 
	  </p>
	  <p>For example one would declare a system wide known matrix
		inside and <a href="#module">module</a> with<br/> 
		<code>
		  Matrix&lt; complex&lt;float&gt; &gt;& A =<br/>
		  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		  DataBase::Instance()-&gt;AddMatrix <br/>
		  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		  ("A", NEW
		  Matrix&lt; complex&lt;float&gt; >(300,100,8,8));
		</code><br/>
		and retrieve a Matrix from the database with<br/>
		<code>
		  Matrix&lt; complex&lt;float&gt; &gt;& A =<br/>
		  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		  DataBase::Instance()-&gt;GetCXFL ("A");</code>.
	  </p>
	  <p>
		Please note that the above <code>NEW</code> call is not a
		typo. It arises with the need to deviate from the standard C++
		new object operator to provide smart pointers and has been
		introduced to the matrix to keep memory management more robust. 
	  </p>


	  <a name="module"></a>
	  <h2>Module</h2>
	  <p class="lead">
		Processing code is put in so-called strategies which find
		their representation in runtime loadable modules. Every
		module's main Class must derive from
		the <code>ReconStrategy</code> base class.
	  </p>
	  <p>
		Any such derived class is provided full access to
		the <code>Database</code> instance and to
		the <code>Configuration</code> super class that holds the meta
		data. This is a very convenient feature that lets data be
		handled on client application as well as remote application in
		the very same fashion. 
	  </p>
	  <p>
		An empty template for such a strategy is found in
		<code>DummyRecon</code> located like all other modules in
		the <code>src/modules</code> directory. codeare brings along
		as of now modules for reconstruction algorithms SENSE,
		Non-Cartesian SENSE, Compressed Sensing, GRAPPA, as well as
		for RF pulse design algorithms k-T-points and Time-reversal.
	  </p>

	  <a name="connector"></a>
	  <h2>Connector<T></h2>
	  <p class="lead">
		One potentially very valuable feature of codeare is that it
		provides an asynchroenous communication to send and receive
		meta data as well as matrices in a nicely encapsulated fashion
		to keep the network communication away from the programmer.
	  </p>
	  <p>
		That is to say that the reconstruction / data manipulation /
		sequence runtime manipulation code can run on the invocing
		machine but also on a remote server. The data transport and
		transparency of the network functionality is achieved as of
		now with <code>CORBA</code> and in particular with
		the <code>omniORB</code> implementation. 
	  </p>
	  <p>
		There will be a tutorial in how to use this functionality for
		doing online and realtime data manipulation on scanned data as
		an intermediate step before the remaining data processing is
		done on the data.
	  </p>
	  <p>
		The connector class provides the programmers with the
		abstraction from local and remote processing of data.
	  </p>
	  
	  <a name="api"></a>
	  <h2>API</h2>
	  <p>
		Details are found in the <a href="/api/html/index.html" target="_api">API</a>.
	  </p>

    ]]>
  </article>
</main> 
